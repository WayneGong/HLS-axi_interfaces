-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi_interfaces is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    d_o_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    d_o_ce0 : OUT STD_LOGIC;
    d_o_we0 : OUT STD_LOGIC;
    d_o_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    d_i_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    d_i_ce0 : OUT STD_LOGIC;
    d_i_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of axi_interfaces is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axi_interfaces,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.438000,HLS_SYN_LAT=74,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=93,HLS_SYN_LUT=69,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal acc_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_ce0 : STD_LOGIC;
    signal acc_we0 : STD_LOGIC;
    signal acc_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_116_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_2_fu_137_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_172 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal acc_addr_1_reg_177 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln24_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln26_1_fu_148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_1_reg_182 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_0_reg_88 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln19_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_99 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln20_fu_122_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_fu_143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln26_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_fu_127_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component axi_interfaces_acc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    acc_U : component axi_interfaces_acc
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_address0,
        ce0 => acc_ce0,
        we0 => acc_we0,
        d0 => acc_d0,
        q0 => acc_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_110_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_88 <= i_fu_116_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_88 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_1_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_99 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_1_reg_99 <= i_2_reg_172;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_131_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                acc_addr_1_reg_177 <= zext_ln26_fu_143_p1(3 - 1 downto 0);
                    zext_ln26_1_reg_182(5 downto 0) <= zext_ln26_1_fu_148_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_2_reg_172 <= i_2_fu_137_p2;
            end if;
        end if;
    end process;
    zext_ln26_1_reg_182(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln24_fu_131_p2, icmp_ln19_fu_110_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln19_fu_110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln24_fu_131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    acc_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, acc_addr_1_reg_177, ap_CS_fsm_state4, zext_ln20_fu_122_p1, zext_ln26_fu_143_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            acc_address0 <= acc_addr_1_reg_177;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            acc_address0 <= zext_ln26_fu_143_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            acc_address0 <= zext_ln20_fu_122_p1(3 - 1 downto 0);
        else 
            acc_address0 <= "XXX";
        end if; 
    end process;


    acc_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            acc_ce0 <= ap_const_logic_1;
        else 
            acc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, add_ln26_fu_153_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            acc_d0 <= add_ln26_fu_153_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            acc_d0 <= ap_const_lv32_0;
        else 
            acc_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    acc_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_110_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln19_fu_110_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            acc_we0 <= ap_const_logic_1;
        else 
            acc_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln26_fu_153_p2 <= std_logic_vector(unsigned(acc_q0) + unsigned(d_i_q0));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state3, icmp_ln24_fu_131_p2)
    begin
        if (((icmp_ln24_fu_131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln24_fu_131_p2)
    begin
        if (((icmp_ln24_fu_131_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_i_address0 <= zext_ln26_1_fu_148_p1(5 - 1 downto 0);

    d_i_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_i_ce0 <= ap_const_logic_1;
        else 
            d_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_o_address0 <= zext_ln26_1_reg_182(5 - 1 downto 0);

    d_o_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_o_ce0 <= ap_const_logic_1;
        else 
            d_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    d_o_d0 <= std_logic_vector(unsigned(acc_q0) + unsigned(d_i_q0));

    d_o_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_o_we0 <= ap_const_logic_1;
        else 
            d_o_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_137_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(i_1_reg_99));
    i_fu_116_p2 <= std_logic_vector(unsigned(i_0_reg_88) + unsigned(ap_const_lv4_1));
    icmp_ln19_fu_110_p2 <= "1" when (i_0_reg_88 = ap_const_lv4_8) else "0";
    icmp_ln24_fu_131_p2 <= "1" when (i_1_reg_99 = ap_const_lv6_20) else "0";
    rem_fu_127_p1 <= i_1_reg_99(3 - 1 downto 0);
    zext_ln20_fu_122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_88),64));
    zext_ln26_1_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_99),64));
    zext_ln26_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rem_fu_127_p1),64));
end behav;
