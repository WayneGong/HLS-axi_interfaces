// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axi_interfaces,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.438000,HLS_SYN_LAT=74,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=93,HLS_SYN_LUT=69,HLS_VERSION=2019_1}" *)

module axi_interfaces (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_o_address0,
        d_o_ce0,
        d_o_we0,
        d_o_d0,
        d_i_address0,
        d_i_ce0,
        d_i_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] d_o_address0;
output   d_o_ce0;
output   d_o_we0;
output  [31:0] d_o_d0;
output  [4:0] d_i_address0;
output   d_i_ce0;
input  [31:0] d_i_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg d_o_ce0;
reg d_o_we0;
reg d_i_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] acc_address0;
reg    acc_ce0;
reg    acc_we0;
reg   [31:0] acc_d0;
wire   [31:0] acc_q0;
wire   [3:0] i_fu_116_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] i_2_fu_137_p2;
reg   [5:0] i_2_reg_172;
wire    ap_CS_fsm_state3;
reg   [2:0] acc_addr_1_reg_177;
wire   [0:0] icmp_ln24_fu_131_p2;
wire   [63:0] zext_ln26_1_fu_148_p1;
reg   [63:0] zext_ln26_1_reg_182;
reg   [3:0] i_0_reg_88;
wire   [0:0] icmp_ln19_fu_110_p2;
reg   [5:0] i_1_reg_99;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln20_fu_122_p1;
wire   [63:0] zext_ln26_fu_143_p1;
wire   [31:0] add_ln26_fu_153_p2;
wire   [2:0] rem_fu_127_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

axi_interfaces_acc #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
acc_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_address0),
    .ce0(acc_ce0),
    .we0(acc_we0),
    .d0(acc_d0),
    .q0(acc_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_110_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_88 <= i_fu_116_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_88 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_110_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_99 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_99 <= i_2_reg_172;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        acc_addr_1_reg_177 <= zext_ln26_fu_143_p1;
        zext_ln26_1_reg_182[5 : 0] <= zext_ln26_1_fu_148_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_2_reg_172 <= i_2_fu_137_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_address0 = acc_addr_1_reg_177;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        acc_address0 = zext_ln26_fu_143_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        acc_address0 = zext_ln20_fu_122_p1;
    end else begin
        acc_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        acc_ce0 = 1'b1;
    end else begin
        acc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_d0 = add_ln26_fu_153_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        acc_d0 = 32'd0;
    end else begin
        acc_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln19_fu_110_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        acc_we0 = 1'b1;
    end else begin
        acc_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        d_i_ce0 = 1'b1;
    end else begin
        d_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        d_o_ce0 = 1'b1;
    end else begin
        d_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        d_o_we0 = 1'b1;
    end else begin
        d_o_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln19_fu_110_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln24_fu_131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_fu_153_p2 = (acc_q0 + d_i_q0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign d_i_address0 = zext_ln26_1_fu_148_p1;

assign d_o_address0 = zext_ln26_1_reg_182;

assign d_o_d0 = (acc_q0 + d_i_q0);

assign i_2_fu_137_p2 = (6'd1 + i_1_reg_99);

assign i_fu_116_p2 = (i_0_reg_88 + 4'd1);

assign icmp_ln19_fu_110_p2 = ((i_0_reg_88 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_131_p2 = ((i_1_reg_99 == 6'd32) ? 1'b1 : 1'b0);

assign rem_fu_127_p1 = i_1_reg_99[2:0];

assign zext_ln20_fu_122_p1 = i_0_reg_88;

assign zext_ln26_1_fu_148_p1 = i_1_reg_99;

assign zext_ln26_fu_143_p1 = rem_fu_127_p1;

always @ (posedge ap_clk) begin
    zext_ln26_1_reg_182[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //axi_interfaces
